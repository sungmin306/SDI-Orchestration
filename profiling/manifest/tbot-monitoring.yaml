apiVersion: v1
kind: Namespace
metadata: { name: tbot-monitoring }

# ---------- Secrets ----------
---
apiVersion: v1
kind: Secret
metadata: { name: rabbitmq-creds, namespace: tbot-monitoring }
type: Opaque
stringData:
  user: <rabbitmq user 이름 설정> # 직접 설정
  pass: <rabbitmq pw 설정> # 직접 설정
---
apiVersion: v1
kind: Secret
metadata: { name: influxdb-creds, namespace: tbot-monitoring }
type: Opaque
stringData:
  token: my-super-secret-token
  username: <admin 설정> # 직접 설정
  password: <pw 설정정> # 직접 설정

# ---------- metric-collector ----------
---
apiVersion: apps/v1
kind: Deployment
metadata: { name: metric-collector, namespace: tbot-monitoring }
spec:
  selector: { matchLabels: { app: metric-collector } }
  template:
    metadata: { labels: { app: metric-collector } }
    spec:
      nodeSelector: { kubernetes.io/arch: amd64 }
      containers:
      - name: broker
        image: rabbitmq:3-management-alpine
        env:
        - name: RABBITMQ_DEFAULT_USER
          valueFrom: { secretKeyRef: { name: rabbitmq-creds, key: user } }
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom: { secretKeyRef: { name: rabbitmq-creds, key: pass } }
        ports:
        - { name: amqp,  containerPort: 5672 }
        - { name: mgmt,  containerPort: 15672 }
---
apiVersion: v1
kind: Service
metadata: { name: metric-collector, namespace: tbot-monitoring }
spec:
  type: NodePort
  selector: { app: metric-collector }
  ports:
  - name: amqp
    port: 5672
    targetPort: amqp
    nodePort: 30672
  - name: mgmt
    port: 15672
    targetPort: mgmt
    nodePort: 31672

# ---------- InfluxDB ----------
---
apiVersion: apps/v1
kind: StatefulSet
metadata: { name: influxdb, namespace: tbot-monitoring }
spec:
  serviceName: influxdb
  selector: { matchLabels: { app: influxdb } }
  template:
    metadata: { labels: { app: influxdb } }
    spec:
      nodeSelector: { kubernetes.io/arch: amd64 }
      containers:
      - name: influxdb
        image: influxdb:2.7
        env:
        - { name: DOCKER_INFLUXDB_INIT_MODE,   value: setup }
        - { name: DOCKER_INFLUXDB_INIT_BUCKET, value: turtlebot }
        - { name: DOCKER_INFLUXDB_INIT_ORG,    value: keti }
        - name: DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
          valueFrom: { secretKeyRef: { name: influxdb-creds, key: token } }
        - name: DOCKER_INFLUXDB_INIT_USERNAME
          valueFrom: { secretKeyRef: { name: influxdb-creds, key: username } }
        - name: DOCKER_INFLUXDB_INIT_PASSWORD
          valueFrom: { secretKeyRef: { name: influxdb-creds, key: password } }
        ports:
        - { containerPort: 8086 }
        volumeMounts:
        - { name: data, mountPath: /var/lib/influxdb2 }
  volumeClaimTemplates:
  - metadata: { name: data }
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources: { requests: { storage: 10Gi } }
---
apiVersion: v1
kind: Service
metadata: { name: influxdb, namespace: tbot-monitoring }
spec:
  type: NodePort
  selector: { app: influxdb }
  ports:
  - port: 8086
    targetPort: 8086
    nodePort: 32086

# ---------- Ingester ----------
---
apiVersion: apps/v1
kind: Deployment
metadata: { name: metrics-ingester, namespace: tbot-monitoring }
spec:
  selector: { matchLabels: { app: ingester } }
  template:
    metadata: { labels: { app: ingester } }
    spec:
      nodeSelector: { kubernetes.io/arch: amd64 }
      containers:
      - name: ingester
        image: ketidevit2/rabbit-influx-ingester:0.8
        env:
        - { name: RABBITMQ_HOST, value: metric-collector.tbot-monitoring.svc.cluster.local }
        - name: RABBITMQ_USER
          valueFrom: { secretKeyRef: { name: rabbitmq-creds, key: user } }
        - name: RABBITMQ_PASS
          valueFrom: { secretKeyRef: { name: rabbitmq-creds, key: pass } }
        - { name: INFLUX_URL,  value: http://influxdb.tbot-monitoring.svc.cluster.local:8086 }
        - name: INFLUX_TOKEN
          valueFrom: { secretKeyRef: { name: influxdb-creds, key: token } }
        - { name: INFLUX_ORG,    value: keti }
        - { name: INFLUX_BUCKET, value: turtlebot }
